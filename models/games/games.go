package games

type Win struct {
	Top            byte
	Mid            byte
	Bottom         byte
	DLow           byte
	DHigh          byte
	ZigRight       byte
	ZizLeft        byte
	ZigDoubleLeft  byte
	ZigDoubleRight byte
	ZigLongLeft    byte
}

type Game struct {
	Reels [][]uint16
	Lines [][]uint16
}

var (
	//99% rtp ORIGINAL RESTORE
	Game1 = Game{Reels: [][]uint16{
		{11, 5, 10, 2, 7, 5, 9, 1, 7, 3, 8, 4, 11, 12, 6, 10, 3, 8, 2, 11, 3, 8, 5, 12, 6, 9, 12, 4, 10, 13, 2, 7, 6, 9},
		{11, 12, 3, 9, 8, 4, 9, 5, 7, 2, 9, 6, 7, 2, 8, 5, 11, 6, 8, 10, 3, 12, 2, 10, 11, 1, 10, 4, 13, 6, 7, 5, 12, 3},
		{8, 5, 11, 3, 12, 6, 9, 7, 3, 10, 4, 8, 13, 2, 7, 4, 11, 2, 9, 5, 12, 3, 10, 9, 2, 12, 1, 7, 5, 8, 6, 11, 10, 6},
		{3, 10, 5, 11, 6, 7, 11, 6, 7, 2, 13, 3, 9, 2, 10, 1, 12, 11, 3, 12, 4, 9, 8, 5, 10, 2, 8, 5, 7, 12, 4, 8, 6, 9},
		{6, 7, 10, 9, 1, 12, 6, 11, 2, 9, 3, 8, 2, 7, 5, 10, 7, 4, 8, 3, 12, 13, 6, 11, 5, 8, 2, 10, 5, 12, 4, 9, 3, 11},
	},
		Lines: [][]uint16{
			{2, 2, 2, 2, 2}, // 1
			{1, 1, 1, 1, 1}, // 2
			{3, 3, 3, 3, 3}, // 3
			{1, 2, 3, 2, 1}, // 4
			{3, 2, 1, 2, 3}, // 5
			{1, 1, 2, 3, 3}, // 6
			{3, 3, 2, 1, 1}, // 7
			{2, 1, 2, 3, 2}, // 8
			{2, 3, 2, 1, 2}, // 9
			{1, 2, 2, 2, 3}, // 10
			{3, 2, 2, 2, 1}, // 11
			{2, 1, 1, 2, 3}, // 12
			{2, 3, 3, 2, 1}, // 13
			{2, 2, 1, 2, 3}, // 14
			{2, 2, 3, 2, 1}, // 15
			{1, 1, 2, 3, 2}, // 16
			{3, 3, 2, 1, 2}, // 17
			{2, 1, 2, 3, 3}, // 18
			{2, 3, 2, 1, 1}, // 19
			{1, 1, 1, 2, 3}, // 20
			{3, 3, 3, 2, 1}, // 21
			{1, 2, 3, 3, 3}, // 22
			{3, 2, 1, 1, 1}, // 23
			{1, 2, 1, 2, 1}, // 24
			{3, 2, 3, 2, 3}, // 25
			{1, 2, 2, 2, 1}, // 26
			{3, 2, 2, 2, 3}, // 27
			{2, 1, 1, 1, 2}, // 28
			{2, 3, 3, 3, 2}, // 29
			{1, 2, 1, 2, 3}, // 30
			{3, 2, 3, 2, 1}, // 31
			{1, 2, 3, 3, 2}, // 32
			{3, 2, 1, 1, 2}, // 33
			{1, 2, 3, 2, 2}, // 34
			{3, 2, 1, 2, 2}, // 35
			{2, 3, 2, 3, 2}, // 36
			{2, 1, 2, 1, 2}, // 37
			{1, 2, 3, 2, 3}, // 38
			{3, 2, 1, 2, 1}, // 39
			{1, 1, 2, 1, 1}, // 40
			{3, 3, 2, 3, 3}, // 41
			{1, 1, 2, 2, 3}, // 42
			{3, 3, 2, 2, 1}, // 43
			{1, 2, 2, 3, 3}, // 44
			{3, 2, 2, 1, 1}, // 45
			{2, 2, 1, 2, 2}, // 46
			{2, 2, 3, 2, 2}, // 47
			{2, 1, 2, 2, 3}, // 48
			{2, 3, 2, 2, 1}, // 49
			{1, 2, 2, 3, 2}, // 50
			{3, 2, 2, 1, 2}, // 51
			{1, 1, 1, 2, 2}, // 52
			{3, 3, 3, 2, 2}, // 53
			{2, 2, 2, 1, 1}, // 54
			{2, 2, 2, 3, 3}, // 55
			{1, 1, 2, 2, 2}, // 56
			{3, 3, 2, 2, 2}, // 57
			{2, 2, 1, 1, 1}, // 58
			{2, 2, 3, 3, 3}, // 59
			{1, 1, 1, 2, 1}, // 60
			{3, 3, 3, 2, 3}, // 61
			{1, 1, 1, 1, 2}, // 62
			{3, 3, 3, 3, 2}, // 63
			{2, 1, 1, 1, 1}, // 64
			{2, 3, 3, 3, 3}, // 65
			{1, 1, 2, 1, 2}, // 66
			{3, 3, 2, 3, 2}, // 67
			{2, 1, 1, 2, 1}, // 68
			{2, 3, 3, 2, 3}, // 69
			{1, 1, 2, 2, 1}, // 70
			{3, 3, 2, 2, 3}, // 71
			{2, 1, 1, 2, 2}, // 72
			{2, 3, 3, 2, 2}, // 73
			{1, 2, 1, 1, 1}, // 74
			{3, 2, 3, 3, 3}, // 75
			{2, 1, 2, 1, 1}, // 76
			{2, 3, 2, 3, 3}, // 77
			{1, 2, 1, 1, 2}, // 78
			{3, 2, 3, 3, 2}, // 79
			{2, 1, 2, 2, 1}, // 80
			{2, 3, 2, 2, 3}, // 81
			{1, 2, 1, 2, 2}, // 82
			{3, 2, 3, 2, 2}, // 83
			{2, 1, 2, 2, 2}, // 84
			{2, 3, 2, 2, 2}, // 85
			{1, 2, 2, 1, 1}, // 86
			{3, 2, 2, 3, 3}, // 87
			{2, 2, 1, 1, 2}, // 88
			{2, 2, 3, 3, 2}, // 89
			{1, 2, 2, 1, 2}, // 90
			{3, 2, 2, 3, 2}, // 91
			{2, 2, 1, 2, 1}, // 92
			{2, 2, 3, 2, 3}, // 93
			{1, 2, 2, 2, 2}, // 94
			{3, 2, 2, 2, 2}, // 95
			{2, 2, 2, 1, 2}, // 96
			{2, 2, 2, 3, 2}, // 97
			{2, 2, 2, 2, 1}, // 98
			{2, 2, 2, 2, 3}, // 99

		},
	}

	//MOCKUP - TESTS high hit ration
	GameTest = Game{Reels: [][]uint16{
		{1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1},
		{1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1},
		{1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1},
		{1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1},
		{1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1},
	},
		Lines: [][]uint16{
			{1, 1, 1, 1, 1}, // 1
			{0, 0, 0, 0, 0}, // 2
			{2, 2, 2, 2, 2}, // 3
			{0, 1, 2, 1, 0}, // 4
			{2, 1, 0, 1, 2}, // 5
			{0, 0, 1, 2, 2}, // 6
			{2, 2, 1, 0, 0}, // 7
			{1, 0, 1, 2, 1}, // 8
			{1, 2, 1, 0, 1}, // 9
			{0, 1, 1, 1, 2}, // 10
		},
	}
)

func (g *Game) ClampLines() {
	for i := 0; i < len(g.Lines); i++ {
		for j := 0; j < 5; j++ {
			g.Lines[i][j] -= 1
		}
	}
}
