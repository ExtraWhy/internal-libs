// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package playerproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceGameWonClient is the client API for ServiceGameWon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceGameWonClient interface {
	GetWinForPlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error)
	GetWinForCleopatra(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*CleopatraWins, error)
}

type serviceGameWonClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceGameWonClient(cc grpc.ClientConnInterface) ServiceGameWonClient {
	return &serviceGameWonClient{cc}
}

func (c *serviceGameWonClient) GetWinForPlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error) {
	out := new(PlayerResponse)
	err := c.cc.Invoke(ctx, "/playerproto.ServiceGameWon/GetWinForPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGameWonClient) GetWinForCleopatra(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*CleopatraWins, error) {
	out := new(CleopatraWins)
	err := c.cc.Invoke(ctx, "/playerproto.ServiceGameWon/GetWinForCleopatra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceGameWonServer is the server API for ServiceGameWon service.
// All implementations must embed UnimplementedServiceGameWonServer
// for forward compatibility
type ServiceGameWonServer interface {
	GetWinForPlayer(context.Context, *PlayerRequest) (*PlayerResponse, error)
	GetWinForCleopatra(context.Context, *PlayerRequest) (*CleopatraWins, error)
	mustEmbedUnimplementedServiceGameWonServer()
}

// UnimplementedServiceGameWonServer must be embedded to have forward compatible implementations.
type UnimplementedServiceGameWonServer struct {
}

func (UnimplementedServiceGameWonServer) GetWinForPlayer(context.Context, *PlayerRequest) (*PlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinForPlayer not implemented")
}
func (UnimplementedServiceGameWonServer) GetWinForCleopatra(context.Context, *PlayerRequest) (*CleopatraWins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinForCleopatra not implemented")
}
func (UnimplementedServiceGameWonServer) mustEmbedUnimplementedServiceGameWonServer() {}

// UnsafeServiceGameWonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceGameWonServer will
// result in compilation errors.
type UnsafeServiceGameWonServer interface {
	mustEmbedUnimplementedServiceGameWonServer()
}

func RegisterServiceGameWonServer(s grpc.ServiceRegistrar, srv ServiceGameWonServer) {
	s.RegisterService(&ServiceGameWon_ServiceDesc, srv)
}

func _ServiceGameWon_GetWinForPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGameWonServer).GetWinForPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playerproto.ServiceGameWon/GetWinForPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGameWonServer).GetWinForPlayer(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGameWon_GetWinForCleopatra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGameWonServer).GetWinForCleopatra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playerproto.ServiceGameWon/GetWinForCleopatra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGameWonServer).GetWinForCleopatra(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceGameWon_ServiceDesc is the grpc.ServiceDesc for ServiceGameWon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceGameWon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playerproto.ServiceGameWon",
	HandlerType: (*ServiceGameWonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWinForPlayer",
			Handler:    _ServiceGameWon_GetWinForPlayer_Handler,
		},
		{
			MethodName: "GetWinForCleopatra",
			Handler:    _ServiceGameWon_GetWinForCleopatra_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
