// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ExtraWhy/internal-libs/dynconfig (interfaces: metrics,logger,Adapter)
//
// Generated by this command:
//
//	mockgen -destination mock_test.go -package dynconfig_test . metrics,logger,Adapter
//

// Package dynconfig_test is a generated GoMock package.
package dynconfig_test

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// Mockmetrics is a mock of metrics interface.
type Mockmetrics struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsMockRecorder
	isgomock struct{}
}

// MockmetricsMockRecorder is the mock recorder for Mockmetrics.
type MockmetricsMockRecorder struct {
	mock *Mockmetrics
}

// NewMockmetrics creates a new mock instance.
func NewMockmetrics(ctrl *gomock.Controller) *Mockmetrics {
	mock := &Mockmetrics{ctrl: ctrl}
	mock.recorder = &MockmetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmetrics) EXPECT() *MockmetricsMockRecorder {
	return m.recorder
}

// Increment mocks base method.
func (m *Mockmetrics) Increment(metricName string, value int, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", metricName, value, tags)
}

// Increment indicates an expected call of Increment.
func (mr *MockmetricsMockRecorder) Increment(metricName, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*Mockmetrics)(nil).Increment), metricName, value, tags)
}

// Timing mocks base method.
func (m *Mockmetrics) Timing(metricName string, duration time.Duration, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Timing", metricName, duration, tags)
}

// Timing indicates an expected call of Timing.
func (mr *MockmetricsMockRecorder) Timing(metricName, duration, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*Mockmetrics)(nil).Timing), metricName, duration, tags)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
	isgomock struct{}
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *Mocklogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *Mocklogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerMockRecorder) Warn(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mocklogger)(nil).Warn), varargs...)
}

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
	isgomock struct{}
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockAdapter) GetConfig(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockAdapterMockRecorder) GetConfig(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockAdapter)(nil).GetConfig), key)
}
